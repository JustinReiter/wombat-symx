Functions in "tests/test2_neg_abs.bc":
	"std::sys_common::backtrace::__rust_begin_short_backtrace::h453091943a0e104b" == "_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h453091943a0e104bE"
	"std::rt::lang_start::h018194599fe7931e" == "_ZN3std2rt10lang_start17h018194599fe7931eE"
	"std::rt::lang_start::{{closure}}::hf4fa45595868fc4a" == "_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hf4fa45595868fc4aE"
	"std::sys::unix::process::process_common::ExitCode::as_i32::h2feb8834646b32b6" == "_ZN3std3sys4unix7process14process_common8ExitCode6as_i3217h2feb8834646b32b6E"
	"std::process::ExitCode::to_i32::hd66daa771b2592cc" == "_ZN3std7process8ExitCode6to_i3217hd66daa771b2592ccE"
	"core::ops::function::FnOnce::call_once{{vtable.shim}}::hd8ebf1f26b08af95" == "_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17hd8ebf1f26b08af95E"
	"core::ops::function::FnOnce::call_once::h2edfba1fdcdc7fad" == "_ZN4core3ops8function6FnOnce9call_once17h2edfba1fdcdc7fadE"
	"core::ops::function::FnOnce::call_once::ha1da11f37e2f73e4" == "_ZN4core3ops8function6FnOnce9call_once17ha1da11f37e2f73e4E"
	"core::ptr::drop_in_place<std::rt::lang_start<()>::{{closure}}>::h48ba752404ae2419" == "_ZN4core3ptr85drop_in_place$LT$std..rt..lang_start$LT$$LP$$RP$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17h48ba752404ae2419E"
	"core::hint::black_box::hcc63372e6f8b2d42" == "_ZN4core4hint9black_box17hcc63372e6f8b2d42E"
	"<() as std::process::Termination>::report::h29691115e9eb3ecd" == "_ZN54_$LT$$LP$$RP$$u20$as$u20$std..process..Termination$GT$6report17h29691115e9eb3ecdE"
	"<std::process::ExitCode as std::process::Termination>::report::hfd0da5273f7a0831" == "_ZN68_$LT$std..process..ExitCode$u20$as$u20$std..process..Termination$GT$6report17hfd0da5273f7a0831E"
	"test2_neg_abs::neg_abs::h592470c6b5d02a54" == "_ZN13test2_neg_abs7neg_abs17h592470c6b5d02a54E"
	"test2_neg_abs::main::h7bcd26289bc4eeb9" == "_ZN13test2_neg_abs4main17h7bcd26289bc4eeb9E"
	"rust_eh_personality" == "rust_eh_personality"
	"std::rt::lang_start_internal::hbbfe6e663b24763e" == "_ZN3std2rt19lang_start_internal17hbbfe6e663b24763eE"
	"llvm.smul.with.overflow.i32" == "llvm.smul.with.overflow.i32"
	"llvm.expect.i1" == "llvm.expect.i1"
	"core::panicking::panic::h5978a1941192adf2" == "_ZN4core9panicking5panic17h5978a1941192adf2E"
	"main" == "main"

Backward Symbolic Execution in test2_neg_abs::neg_abs::h592470c6b5d02a54
Number of Nodes: 6
Arg count: 1
Basic Blocks:
	Basic Block: "start"
		is_cleanup: NO
		Statement: "\"  %_2 = icmp sgt i32 %0, 0\""
		Statement: "\"  br i1 %_2, label %bb1, label %bb3\""
		Last statement is a terminator
	Basic Block: "bb3"
		is_cleanup: NO
		Statement: "\"  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\""
		Statement: "\"  %_7 = icmp sle i32 %x.0, 0\""
		Statement: "\"  %_6 = xor i1 %_7, true\""
		Statement: "\"  br i1 %_6, label %bb4, label %bb5\""
		Last statement is a terminator
	Basic Block: "bb1"
		is_cleanup: NO
		Statement: "\"  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\""
		Statement: "\"  %_5.0 = extractvalue { i32, i1 } %1, 0\""
		Statement: "\"  %_5.1 = extractvalue { i32, i1 } %1, 1\""
		Statement: "\"  br i1 %_5.1, label %panic, label %bb3, !prof !2\""
		Last statement is a terminator
	Basic Block: "panic"
		is_cleanup: YES
		Statement: "\"  call void @_ZN4core9panicking5panic17h5978a1941192adf2E([0 x i8]* align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* align 8 bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\\\"core::panic::location::Location\\\"*)) #7\""
		Statement: "\"  unreachable\""
		Last statement is a terminator
	Basic Block: "bb5"
		is_cleanup: NO
		Statement: "\"  ret i32 %x.0\""
		Last statement is a terminator
	Basic Block: "bb4"
		is_cleanup: YES
		Statement: "\"  call void @_ZN4core9panicking5panic17h5978a1941192adf2E([0 x i8]* align 1 bitcast (<{ [24 x i8] }>* @alloc34 to [0 x i8]*), i64 24, %\\\"core::panic::location::Location\\\"* align 8 bitcast (<{ i8*, [16 x i8] }>* @alloc36 to %\\\"core::panic::location::Location\\\"*)) #7\""
		Statement: "\"  unreachable\""
		Last statement is a terminator

Start node: "start"
	Successor to start node: "bb1"
	Successor to start node: "bb3"
Forward edges:
	{"panic": {"common_end"}, "start": {"bb3", "bb1"}, "bb4": {"common_end"}, "bb5": {"common_end"}, "bb3": {"bb5", "bb4"}, "bb1": {"bb3", "panic"}}
Backward edges:
	{"bb5": {"bb3"}, "bb4": {"bb3"}, "bb3": {"start", "bb1"}, "common_end": {"panic", "bb4", "bb5"}, "start": {}, "bb1": {"start"}, "panic": {"bb1"}}
Forward sorted nodes:
	["start", "bb1", "panic", "bb3", "bb5", "bb4", "common_end"]
Backward sorted nodes:
	["common_end", "bb4", "bb5", "bb3", "panic", "bb1", "start"]
(declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_6 () Bool)
(declare-fun bb4 () Bool)
(declare-fun bb5 () Bool)
(declare-fun const_true () Bool)
(declare-fun const_0 () Int)
(declare-fun %_7 () Bool)
(declare-fun %x.0 () Int)
(declare-fun %_5.1 () Bool)
(declare-fun %_2 () Bool)
(declare-fun bb3 () Bool)
(declare-fun panic () Bool)
(declare-fun const_-1 () Int)
(declare-fun %_5.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun %0 () Int)
(declare-fun bb1 () Bool)
(declare-fun start () Bool)
(assert (= common_end (=> (and true true true true) (and (not panic_var) true))))
(assert (= bb4
   (=> (and true (= %_6 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb5
   (=> (and true (= %_6 false)) (=> (= panic_var false) (and true common_end)))))
(assert (= const_true true))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_7 (<= %x.0 const_0))
               (=> (= %_6 (xor %_7 const_true)) (and true bb5 bb4)))))
  (= bb3 (=> (and true (= %_2 false) (= %_5.1 false)) a!1))))
(assert (= panic
   (=> (and true (= %_5.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_-1 (- 1)))
(assert (let ((a!1 (> (* const_-1 %0)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (* const_-1 %0)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_5.1 %1.1)
               (=> (=> (= %_5.1 false) (= %x.0 %_5.0)) (and true panic bb3)))))
(let ((a!4 (=> (and (= %1.0 (* const_-1 %0)) (= %1.1 (or a!1 a!2)))
               (=> (= %_5.0 %1.0) a!3))))
  (= bb1 (=> (and true (= %_2 true)) a!4)))))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_2 (> %0 const_0))
               (=> (=> (= %_2 false) (= %x.0 %0)) (and true bb3 bb1)))))
  (= start (=> true a!1))))
(assert (let ((a!1 (>= %0
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %0
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))

Function safety: safe

************************************


